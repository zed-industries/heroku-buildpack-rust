#!/bin/bash

# Find all the directories we might need (based on
# heroku-buildpack-nodejs code).
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

# Export DATABASE_URL at build time in case database libraries need it.
if [ -e "$ENV_DIR/DATABASE_URL" ]; then
  export DATABASE_URL="$(cat $ENV_DIR/DATABASE_URL)";
fi

VERSION=stable

# Standard paranoia.
set -eu

# Handle people who still aren't using Rustup.
if [ ! -z ${URL+x} ]; then
    >&2 cat <<EOF
heroku-pack-rust has switched to using rustup.  You no longer need a
URL field in RustConfig. Instead, you should just specify a
rustup-compatible version (such as `1.11`, `stable` or `nighty`) in VERSION.
EOF
    exit 1
fi

export RUSTUP_HOME="$CACHE_DIR/rustup"
export CARGO_HOME="$CACHE_DIR/cargo"
export PATH="\$CARGO_HOME/bin:\$PATH"

# Switch to our cache directory.
mkdir -p "$CACHE_DIR"
cd "$CACHE_DIR"

if [ -d "$RUSTUP_HOME" ]; then
    echo "-----> Checking for new releases of Rust $VERSION channel"
    # It's possible that $VERSION has changed, or the `stable` channel has updated.
    rustup self update
    rustup update stable
    rustup default stable
else
    echo "-----> Downloading rustup"
    curl https://sh.rustup.rs -sSf > rustup.sh
    chmod u+x rustup.sh
    echo "-----> Using rustup to install Rust channel $VERSION"
    ./rustup.sh -y --default-toolchain "$VERSION"
    rm rustup.sh
fi
if [ ! -x "$CARGO_HOME/bin/rustc" ]; then
  echo "failed: Cannot find Rust binaries at $CARGO_HOME"
  exit 1
fi

# This is where we will cache our Rust output.  Note the suggestions at
# https://github.com/alexcrichton/cargo/commit/014765f788ca1c2476936835ca32cc2746f99b42
# which describe how this needs to be named.
export CARGO_TARGET_DIR="$CACHE_DIR/target"

echo "-----> Building application using Cargo"
cd "$BUILD_DIR"
rm -rf target/
cargo build $RUST_CARGO_BUILD_FLAGS
mkdir -p target/release
find "$CARGO_TARGET_DIR/release" -maxdepth 1 -type f -executable -exec cp -a -t target/release {} \;

echo "-----> Installing sqlx-cli"
cargo install sqlx-cli || echo "already installed"
cp $(which sqlx) target/release/
